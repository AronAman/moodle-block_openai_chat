{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["var questionString = 'Ask a question...'\nvar errorString = 'An error occurred! Please try again later.'\n\nexport const init = (data) => {\n\n    const blockId = data['blockId']\n    const api_type = data['api_type']\n\n    addEventListener(\"beforeunload\", e => {\n        localStorage.removeItem(\"block_openai_chat_threadId\");\n    })\n\n    document.querySelector('#openai_input').addEventListener('keyup', e => {\n        if (e.which === 13 && e.target.value !== \"\") {\n            addToChatLog('user', e.target.value)\n            createCompletion(e.target.value, blockId, api_type)\n            e.target.value = ''\n        }\n    })\n\n    require(['core/str'], function(str) {\n        var strings = [\n            {\n                key: 'askaquestion',\n                component: 'block_openai_chat'\n            },\n            {\n                key: 'erroroccurred',\n                component: 'block_openai_chat'\n            },\n        ];\n        str.get_strings(strings).then((results) => {\n            questionString = results[0];\n            errorString = results[1];\n        });\n    });\n}\n\n/**\n * Add a message to the chat UI\n * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\n * @param {string} message The text of the message to add\n */\nconst addToChatLog = (type, message) => {\n    let messageContainer = document.querySelector('#openai_chat_log')\n    \n    const messageElem = document.createElement('div')\n    messageElem.classList.add('openai_message')\n    for (let className of type.split(' ')) {\n        messageElem.classList.add(className)\n    }\n\n    const messageText = document.createElement('span')\n    messageText.innerHTML = message\n    messageElem.append(messageText)\n\n    messageContainer.append(messageElem)\n    if (messageText.offsetWidth) {\n        messageElem.style.width = (messageText.offsetWidth + 40) + \"px\"\n    }\n    messageContainer.scrollTop = messageContainer.scrollHeight\n}\n\n/**\n * Makes an API request to get a completion from GPT-3, and adds it to the chat log\n * @param {string} message The text to get a completion for\n * @param {int} blockId The ID of the block this message is being sent from -- used to override settings if necessary\n * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\n */\nconst createCompletion = (message, blockId, api_type) => {\n    let threadId = null\n    if (api_type === 'assistant') {\n        threadId = localStorage.getItem(\"block_openai_chat_threadId\")\n    }  \n\n    const history = buildTranscript()\n\n    document.querySelector('#openai_input').classList.add('disabled')\n    document.querySelector('#openai_input').classList.remove('error')\n    document.querySelector('#openai_input').placeholder = questionString\n    document.querySelector('#openai_input').blur()\n    addToChatLog('bot loading', '...');\n\n    fetch(`${M.cfg.wwwroot}/blocks/openai_chat/api/completion.php`, {\n        method: 'POST',\n        body: JSON.stringify({\n            message: message,\n            history: history,\n            blockId: blockId,\n            api_type: api_type,\n            threadId: threadId\n        })\n    })\n    .then(response => {\n        let messageContainer = document.querySelector('#openai_chat_log')\n        messageContainer.removeChild(messageContainer.lastElementChild)\n        document.querySelector('#openai_input').classList.remove('disabled')\n\n        if (!response.ok) {\n            throw Error(response.statusText)\n        } else {\n            return response.json()\n        }\n    })\n    .then(data => {\n        try {\n            addToChatLog('bot', data.message)\n            if (data.thread_id) {\n                localStorage.setItem(\"block_openai_chat_threadId\", data.thread_id);\n            }\n        } catch (error) {\n            addToChatLog('bot', data.error.message)\n        }\n        document.querySelector('#openai_input').focus()\n    })\n    .catch(error => {\n        document.querySelector('#openai_input').classList.add('error')\n        document.querySelector('#openai_input').placeholder = errorString\n    })\n}\n\n/**\n * Using the existing messages in the chat history, create a string that can be used to aid completion\n * @return {JSONObject} A transcript of the conversation up to this point\n */\nconst buildTranscript = () => {\n    let transcript = []\n    document.querySelectorAll('.openai_message').forEach((message, index) => {\n        if (index === document.querySelectorAll('.openai_message').length - 1) {\n            return\n        }\n\n        let user = userName\n        if (message.classList.contains('bot')) {\n            user = assistantName\n        }\n        transcript.push({\"user\": user, \"message\": message.innerText})\n    })\n\n    return transcript\n}\n"],"names":["questionString","errorString","data","blockId","api_type","addEventListener","e","localStorage","removeItem","document","querySelector","which","target","value","addToChatLog","createCompletion","require","str","get_strings","key","component","then","results","type","message","messageContainer","messageElem","createElement","classList","add","className","split","messageText","innerHTML","append","offsetWidth","style","width","scrollTop","scrollHeight","threadId","getItem","history","buildTranscript","remove","placeholder","blur","fetch","M","cfg","wwwroot","method","body","JSON","stringify","response","removeChild","lastElementChild","ok","json","Error","statusText","thread_id","setItem","error","focus","catch","transcript","querySelectorAll","forEach","index","length","user","userName","contains","assistantName","push","innerText"],"mappings":"gJAAIA,eAAiB,oBACjBC,YAAc,2DAEGC,aAEXC,QAAUD,KAAI,QACdE,SAAWF,KAAI,SAErBG,iBAAiB,gBAAgBC,IAC7BC,aAAaC,WAAW,iCAG5BC,SAASC,cAAc,iBAAiBL,iBAAiB,SAASC,IAC9C,KAAZA,EAAEK,OAAmC,KAAnBL,EAAEM,OAAOC,QAC3BC,aAAa,OAAQR,EAAEM,OAAOC,OAC9BE,iBAAiBT,EAAEM,OAAOC,MAAOV,QAASC,UAC1CE,EAAEM,OAAOC,MAAQ,OAIzBG,QAAQ,CAAC,aAAa,SAASC,KAW3BA,IAAIC,YAVU,CACV,CACIC,IAAK,eACLC,UAAW,qBAEf,CACID,IAAK,gBACLC,UAAW,uBAGMC,MAAMC,UAC3BtB,eAAiBsB,QAAQ,GACzBrB,YAAcqB,QAAQ,gBAU5BR,aAAe,CAACS,KAAMC,eACpBC,iBAAmBhB,SAASC,cAAc,0BAExCgB,YAAcjB,SAASkB,cAAc,OAC3CD,YAAYE,UAAUC,IAAI,sBACrB,IAAIC,aAAaP,KAAKQ,MAAM,KAC7BL,YAAYE,UAAUC,IAAIC,iBAGxBE,YAAcvB,SAASkB,cAAc,QAC3CK,YAAYC,UAAYT,QACxBE,YAAYQ,OAAOF,aAEnBP,iBAAiBS,OAAOR,aACpBM,YAAYG,cACZT,YAAYU,MAAMC,MAASL,YAAYG,YAAc,GAAM,MAE/DV,iBAAiBa,UAAYb,iBAAiBc,cAS5CxB,iBAAmB,CAACS,QAASrB,QAASC,gBACpCoC,SAAW,KACE,cAAbpC,WACAoC,SAAWjC,aAAakC,QAAQ,qCAG9BC,QAAUC,kBAEhBlC,SAASC,cAAc,iBAAiBkB,UAAUC,IAAI,YACtDpB,SAASC,cAAc,iBAAiBkB,UAAUgB,OAAO,SACzDnC,SAASC,cAAc,iBAAiBmC,YAAc7C,eACtDS,SAASC,cAAc,iBAAiBoC,OACxChC,aAAa,cAAe,OAE5BiC,gBAASC,EAAEC,IAAIC,kDAAiD,CAC5DC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB9B,QAASA,QACTkB,QAASA,QACTvC,QAASA,QACTC,SAAUA,SACVoC,SAAUA,aAGjBnB,MAAKkC,eACE9B,iBAAmBhB,SAASC,cAAc,uBAC9Ce,iBAAiB+B,YAAY/B,iBAAiBgC,kBAC9ChD,SAASC,cAAc,iBAAiBkB,UAAUgB,OAAO,YAEpDW,SAASG,UAGHH,SAASI,aAFVC,MAAML,SAASM,eAK5BxC,MAAKnB,WAEEY,aAAa,MAAOZ,KAAKsB,SACrBtB,KAAK4D,WACLvD,aAAawD,QAAQ,6BAA8B7D,KAAK4D,WAE9D,MAAOE,OACLlD,aAAa,MAAOZ,KAAK8D,MAAMxC,SAEnCf,SAASC,cAAc,iBAAiBuD,WAE3CC,OAAMF,QACHvD,SAASC,cAAc,iBAAiBkB,UAAUC,IAAI,SACtDpB,SAASC,cAAc,iBAAiBmC,YAAc5C,gBAQxD0C,gBAAkB,SAChBwB,WAAa,UACjB1D,SAAS2D,iBAAiB,mBAAmBC,SAAQ,CAAC7C,QAAS8C,YACvDA,QAAU7D,SAAS2D,iBAAiB,mBAAmBG,OAAS,aAIhEC,KAAOC,SACPjD,QAAQI,UAAU8C,SAAS,SAC3BF,KAAOG,eAEXR,WAAWS,KAAK,MAASJ,aAAiBhD,QAAQqD,eAG/CV"}