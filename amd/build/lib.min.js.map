{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["var questionString = 'Ask a question...'\nvar errorString = 'An error occurred! Please try again later.'\n\nexport const init = (blockID) => {\n\n    document.querySelector('#openai_input').addEventListener('keyup', e => {\n        if (e.which === 13 && e.target.value !== \"\") {\n            addToChatLog('user', e.target.value)\n            createCompletion(e.target.value, blockID)\n            e.target.value = ''\n        }\n    })\n\n    require(['core/str'], function(str) {\n        var strings = [\n            {\n                key: 'askaquestion',\n                component: 'block_openai_chat'\n            },\n            {\n                key: 'erroroccurred',\n                component: 'block_openai_chat'\n            },\n        ];\n        str.get_strings(strings).then((results) => {\n            questionString = results[0];\n            errorString = results[1];\n        });\n    });\n}\n\n/**\n * Add a message to the chat UI\n * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\n * @param {string} message The text of the message to add\n */\nconst addToChatLog = (type, message) => {\n    let messageContainer = document.querySelector('#openai_chat_log')\n    \n    const messageElem = document.createElement('div')\n    messageElem.classList.add('openai_message')\n    for (let className of type.split(' ')) {\n        messageElem.classList.add(className)\n    }\n\n    const messageText = document.createElement('span')\n    messageText.innerHTML = message\n    messageElem.append(messageText)\n\n    messageContainer.append(messageElem)\n    if (messageText.offsetWidth) {\n        messageElem.style.width = (messageText.offsetWidth + 40) + \"px\"\n    }\n    messageContainer.scrollTop = messageContainer.scrollHeight\n}\n\n/**\n * Makes an API request to get a completion from GPT-3, and adds it to the chat log\n * @param {string} message The text to get a completion for\n */\nconst createCompletion = (message, blockID) => {\n    const history = buildTranscript()\n    document.querySelector('#openai_input').classList.add('disabled')\n    document.querySelector('#openai_input').classList.remove('error')\n    document.querySelector('#openai_input').placeholder = questionString\n    document.querySelector('#openai_input').blur()\n    addToChatLog('bot loading', '...');\n\n    fetch(`${M.cfg.wwwroot}/blocks/openai_chat/api/completion.php`, {\n        method: 'POST',\n        body: JSON.stringify({\n            message: message,\n            history: history,\n            blockID: blockID\n        })\n    })\n    .then(response => {\n        let messageContainer = document.querySelector('#openai_chat_log')\n        messageContainer.removeChild(messageContainer.lastElementChild)\n        document.querySelector('#openai_input').classList.remove('disabled')\n\n        if (!response.ok) {\n            throw Error(response.statusText)\n        } else {\n            return response.json()\n        }\n    })\n    .then(data => {\n        try {\n            data.choices[0].text ? addToChatLog('bot', data.choices[0].text) : addToChatLog('bot', data.choices[0].message.content);\n        } catch (error) {\n            addToChatLog('bot', data.error.message)\n        }\n        document.querySelector('#openai_input').focus()\n    })\n    .catch(error => {\n        document.querySelector('#openai_input').classList.add('error')\n        document.querySelector('#openai_input').placeholder = errorString\n    })\n\n}\n\n/**\n * Using the existing messages in the chat history, create a string that can be used to aid completion\n * @return {JSONObject} A transcript of the conversation up to this point\n */\nconst buildTranscript = () => {\n    let transcript = []\n    document.querySelectorAll('.openai_message').forEach((message, index) => {\n        if (index === document.querySelectorAll('.openai_message').length - 1) {\n            return\n        }\n\n        let user = userName\n        if (message.classList.contains('bot')) {\n            user = assistantName\n        }\n        transcript.push({\"user\": user, \"message\": message.innerText})\n    })\n\n    return transcript\n}\n"],"names":["questionString","errorString","blockID","document","querySelector","addEventListener","e","which","target","value","addToChatLog","createCompletion","require","str","get_strings","key","component","then","results","type","message","messageContainer","messageElem","createElement","classList","add","className","split","messageText","innerHTML","append","offsetWidth","style","width","scrollTop","scrollHeight","history","buildTranscript","remove","placeholder","blur","fetch","M","cfg","wwwroot","method","body","JSON","stringify","response","removeChild","lastElementChild","ok","json","Error","statusText","data","choices","text","content","error","focus","catch","transcript","querySelectorAll","forEach","index","length","user","userName","contains","assistantName","push","innerText"],"mappings":"gJAAIA,eAAiB,oBACjBC,YAAc,2DAEGC,UAEjBC,SAASC,cAAc,iBAAiBC,iBAAiB,SAASC,IAC9C,KAAZA,EAAEC,OAAmC,KAAnBD,EAAEE,OAAOC,QAC3BC,aAAa,OAAQJ,EAAEE,OAAOC,OAC9BE,iBAAiBL,EAAEE,OAAOC,MAAOP,SACjCI,EAAEE,OAAOC,MAAQ,OAIzBG,QAAQ,CAAC,aAAa,SAASC,KAW3BA,IAAIC,YAVU,CACV,CACIC,IAAK,eACLC,UAAW,qBAEf,CACID,IAAK,gBACLC,UAAW,uBAGMC,MAAMC,UAC3BlB,eAAiBkB,QAAQ,GACzBjB,YAAciB,QAAQ,gBAU5BR,aAAe,CAACS,KAAMC,eACpBC,iBAAmBlB,SAASC,cAAc,0BAExCkB,YAAcnB,SAASoB,cAAc,OAC3CD,YAAYE,UAAUC,IAAI,sBACrB,IAAIC,aAAaP,KAAKQ,MAAM,KAC7BL,YAAYE,UAAUC,IAAIC,iBAGxBE,YAAczB,SAASoB,cAAc,QAC3CK,YAAYC,UAAYT,QACxBE,YAAYQ,OAAOF,aAEnBP,iBAAiBS,OAAOR,aACpBM,YAAYG,cACZT,YAAYU,MAAMC,MAASL,YAAYG,YAAc,GAAM,MAE/DV,iBAAiBa,UAAYb,iBAAiBc,cAO5CxB,iBAAmB,CAACS,QAASlB,iBACzBkC,QAAUC,kBAChBlC,SAASC,cAAc,iBAAiBoB,UAAUC,IAAI,YACtDtB,SAASC,cAAc,iBAAiBoB,UAAUc,OAAO,SACzDnC,SAASC,cAAc,iBAAiBmC,YAAcvC,eACtDG,SAASC,cAAc,iBAAiBoC,OACxC9B,aAAa,cAAe,OAE5B+B,gBAASC,EAAEC,IAAIC,kDAAiD,CAC5DC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB5B,QAASA,QACTgB,QAASA,QACTlC,QAASA,YAGhBe,MAAKgC,eACE5B,iBAAmBlB,SAASC,cAAc,uBAC9CiB,iBAAiB6B,YAAY7B,iBAAiB8B,kBAC9ChD,SAASC,cAAc,iBAAiBoB,UAAUc,OAAO,YAEpDW,SAASG,UAGHH,SAASI,aAFVC,MAAML,SAASM,eAK5BtC,MAAKuC,WAEEA,KAAKC,QAAQ,GAAGC,KAAOhD,aAAa,MAAO8C,KAAKC,QAAQ,GAAGC,MAAQhD,aAAa,MAAO8C,KAAKC,QAAQ,GAAGrC,QAAQuC,SACjH,MAAOC,OACLlD,aAAa,MAAO8C,KAAKI,MAAMxC,SAEnCjB,SAASC,cAAc,iBAAiByD,WAE3CC,OAAMF,QACHzD,SAASC,cAAc,iBAAiBoB,UAAUC,IAAI,SACtDtB,SAASC,cAAc,iBAAiBmC,YAActC,gBASxDoC,gBAAkB,SAChB0B,WAAa,UACjB5D,SAAS6D,iBAAiB,mBAAmBC,SAAQ,CAAC7C,QAAS8C,YACvDA,QAAU/D,SAAS6D,iBAAiB,mBAAmBG,OAAS,aAIhEC,KAAOC,SACPjD,QAAQI,UAAU8C,SAAS,SAC3BF,KAAOG,eAEXR,WAAWS,KAAK,MAASJ,aAAiBhD,QAAQqD,eAG/CV"}